name: Fullstack CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # Run Backend Tests (Spring Boot with Maven)
  run-backend-tests:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine # Using Alpine for smaller image in CI
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Mniaki@22yo # Use a test password for CI. Consider a GitHub Secret for this if sensitive.
          POSTGRES_DB: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready -U postgres -d postgres --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin" # Use Temurin OpenJDK
          java-version: "21" # Match your project's JDK version
          cache: "maven" # Enable Maven caching

      - name: Install Maven dependencies and Run Backend Tests
        run: |
          cd server
          # Set database environment variables for tests.
          # These should match what your Spring Boot tests expect when connecting to the 'postgres' service.
          # If your tests use application-test.properties, ensure it's configured for the 'postgres' service.
          export SPRING_DATASOURCE_URL="jdbc:postgresql://localhost:5432/postgres"
          export SPRING_DATASOURCE_USERNAME="postgres"
          export SPRING_DATASOURCE_PASSWORD="Mniaki@22yo"
          # Run the tests. 'mvn clean install' usually includes tests by default.
          mvn clean install

  # Build and Push Docker Images (after successful tests)
  build-and-push-docker-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [run-backend-tests] # This job depends on backend tests passing
    if: github.ref == 'refs/heads/main' # Only run on pushes to 'main' branch for releases
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # --- Setup for Spring Boot Backend Build ---
      - name: Set up Java for Backend Build
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21" # Make sure this matches your Dockerfile base
          cache: "maven"
      - name: Build Spring Boot JAR
        run: |
          cd server
          mvn clean package -DskipTests # Skip tests here as they ran in the previous job

      # --- Setup for React Frontend Build ---
      - name: Set up Node.js for Frontend Build
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Match your client's Node.js version for build
          cache: "npm" # Cache npm dependencies

      - name: Install Frontend Dependencies
        run: npm install
        working-directory: ./client

      - name: Build React Frontend
        run: npm run build # Assumes a "build" script in client/package.json
        working-directory: ./client
        # No 'env' block here as you stated no build-time env vars

      # --- Docker Login & Build/Push ---
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Use the generated access token

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fairtally-server:latest # Replace with your Docker Hub username and repo name
          # Optional: Add a versioned tag based on commit SHA for traceability
          # tags: ${{ secrets.DOCKERHUB_USERNAME }}/fairtally-server:latest,${{ secrets.DOCKERHUB_USERNAME }}/fairtally-server:${{ github.sha }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fairtally-client:latest # Replace with your Docker Hub username and repo name
          # Optional: Add a versioned tag
          # tags: ${{ secrets.DOCKERHUB_USERNAME }}/fairtally-client:latest,${{ secrets.DOCKERHUB_USERNAME }}/fairtally-client:${{ github.sha }}
          # No 'build-args' here as you stated no build-time env vars for client
